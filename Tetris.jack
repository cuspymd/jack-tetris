class Tetris {
    field Point pieceOrigin;
    field int currentPiece;
    field int currentRotation;
    field Board board;
    field Tetraminos tetraminos;
    field String debugMessage;
    field boolean isLive;
    field int score;

    constructor Tetris new() {
        let board = Board.new();
        let tetraminos = Tetraminos.new();
        let currentPiece = -1;
        let debugMessage = "";
        return this;
    }

    method void init() {
        let isLive = true;
        let score = 0;

        do Screen.clearScreen();
        do board.init();
        do newPiece();
        return;
    }

    method void newPiece() {
        let pieceOrigin = Point.new(5, 1);
        let currentRotation = 0;

        let currentPiece = currentPiece + 1;
        if (currentPiece = tetraminos.getSize()) {
            let currentPiece = 0;
        }
        return;
    }

    method boolean collideAt(int x, int y, int rotation) {
        var Point piecePoint;
        var boolean brick;
        var int i;

        let i = 0;
        while (i < 4) {
            let piecePoint = tetraminos.get(currentPiece, currentRotation, i);
            let brick = board.getBrick(piecePoint.getX() + x, piecePoint.getY() + y);
            if (brick) {
                return true;
            } 
            let i = i + 1;
        }
        return false;
    }

    method void rotate(int i) {
        var int newRotation;
        let newRotation = currentRotation + i;
        if (newRotation = 4) {
            let newRotation = 0;
        }
        if (newRotation = -1) {
            let newRotation = 3;
        }

        if (~collideAt(pieceOrigin.getX(), pieceOrigin.getY(), newRotation)) {
            let currentRotation = newRotation;
        }
        return;
    }

    method void move(int i) {
        if (~collideAt(pieceOrigin.getX() + i, pieceOrigin.getY(), currentRotation)) {
            do pieceOrigin.setX(pieceOrigin.getX() + i);
        }
        return;
    }

    method void dropDown() {
        if (collideAt(pieceOrigin.getX(), pieceOrigin.getY() + 1, currentRotation)) {
            do placeToBoard();
        } else {
            do pieceOrigin.setY(pieceOrigin.getY() + 1);
        }
        return;
    }

    method void placeToBoard() {
        var Point piecePoint;
        var int i;

        let i = 0;
        while (i < 4) {
            let piecePoint = tetraminos.get(currentPiece, currentRotation, i);
            do board.setBrick(pieceOrigin.getX() + piecePoint.getX(), pieceOrigin.getY() + piecePoint.getY(), true);
            let i = i + 1;
        }
        do clearRows();
        do newPiece();

        if (collideAt(pieceOrigin.getX(), pieceOrigin.getY(), currentRotation)) {
            let isLive = false;
        }
        return;
    }

    method void clearRows() {
        var boolean isFool;
        var int i, j;

        let j = board.getHeight() - 2;
        while (j > 0) {
            let isFool = true;
            let i = 1;
            while (i < (board.getWidth()-1)) {
                if (isFool) {
                    if (~board.getBrick(i, j)) {
                       let isFool = false;
                    }
                }
                let i = i + 1;
            }
            if (isFool) {
                do deleteRow(j);
                let score = score + 10;
            } else {
                let j = j - 1;
            }
        }
        return;
    }

    method void deleteRow(int row) {
        var int i, j;
        let j = row - 1;
        while (j > 0) {
            let i = 1;
            while (i < (board.getWidth()-1)) {
                do board.setBrick(i, j+1, board.getBrick(i, j));
                let i = i + 1;
            }

            let j = j - 1;
        }
        return;
    }

    method void drawPiece() {
        var Point piecePoint;
        var int i, thickness, x, y;

        let thickness = board.getThickness();
        let i = 0;

        do Screen.setColor(true);

        while (i < 4) {
            let piecePoint = tetraminos.get(currentPiece, currentRotation, i);
            let x = (piecePoint.getX() + pieceOrigin.getX()) * thickness;
            let y = (piecePoint.getY() + pieceOrigin.getY()) * thickness;

            do Screen.drawRectangle(x, y, x + thickness-1, y + thickness-1);

            let i = i + 1;
        }
        return;
    }

    method void draw() {
        do board.draw();
        do drawPiece();
        do printScore();
        //do Output.printString(debugMessage);
        return;
    }

    method void printScore() {
        do Output.moveCursor(22, 2);
        do Output.printString("Score: ");
        do Output.printInt(score);
        return;
    }

    method void processKey() {
        var char key;
        let key = Keyboard.keyPressed();

        if (key = 130) { // left arrow
            do move(-1);
        }
        if (key = 131) { // up arrow
            do rotate(-1);
        }
        if (key = 132) { // right arrow
            do move(1);
        }
        if (key = 133) { // down arrow
            do dropDown();
        }
        return;
    }

    method void run() {
        var int timeCounter;
        let timeCounter = 0;

        do init();

        while (isLive) {
            let debugMessage = "";
            do processKey();

            let timeCounter = timeCounter + 1;
            if (timeCounter = 10) {
                let timeCounter = 0;
            }
            if (timeCounter = 0) {
                do dropDown();
            }

            do draw();
            do Sys.wait(100);
        }

        do Output.moveCursor(10, 2);
        do Output.printString("Game Over!!");
        return;
    }
}